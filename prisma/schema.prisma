generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) // UUID
  username   String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  teacherId  String?  @unique // One-to-one relationship
  teacher    Teacher? @relation("TeacherUser", fields: [teacherId], references: [id])
}

model Classroom {
  id         String    @id @default(uuid()) // UUID
  section    String
  year_level String
  adviserId  String    @unique // One-to-one relationship
  adviser    Teacher   @relation("Adviser", fields: [adviserId], references: [id])
  students   Student[] // One-to-many relationship with Student
}

model Student {
  id          String      @id @default(uuid()) // UUID for Student ID
  firstName   String
  middleName  String?
  lastName    String
  studentId   String      @unique
  classroomId String?     // Foreign key to Classroom
  classroom   Classroom?  @relation(fields: [classroomId], references: [id])
  subjects    Subject[]   @relation("StudentSubjects")
  grades      Grade[]     // One-to-many relationship with Grade
  year_level  String      @default("7")
  gender      String?
  birthdata   DateTime?
}

model Teacher {
  id         String      @id @default(uuid()) // UUID
  name       String
  rank       String
  licenseNum String
  teacherId  String      @unique
  major      String
  adviserTo  Classroom?  @relation("Adviser") // One-to-one relationship for advising
  subjects   Subject[]   @relation("TeacherSubjects") // One-to-many relationship with Subject
  user       User?       @relation("TeacherUser") // Optional relation to User
}

model Subject {
  id          String     @id @default(uuid()) // UUID
  name        String
  subjectId   String
  teacherId   String     // Foreign key to Teacher
  teacher     Teacher    @relation("TeacherSubjects", fields: [teacherId], references: [id])
  students    Student[]  @relation("StudentSubjects")
  grades      Grade[]    // One-to-many relationship with Grade
  year_level  String
  school_year String
}

model Grade {
  id               String  @id @default(uuid()) // UUID
  studentId        String  // Foreign key to Student (should match Student's `id` type)
  subjectId        String  // Foreign key to Subject
  gradingPeriod    Int     // 1 = 1st Grading, 2 = 2nd Grading, etc.
  writtenWork      Float?   // Grade for Written Work (e.g., 30%)
  performanceTask  Float?   // Grade for Performance Task (e.g., 50%)
  quarterlyAssessment  Float?   // Grade for Quarterly Assessment (e.g., 20%)
   // Sum of the three components (must equal 100%)

  student          Student @relation(fields: [studentId], references: [id])
  subject          Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, gradingPeriod]) // Ensures no duplicate grades per period
}
model GradePercent {
  id                 String  @id @default(uuid())
  writtenWork        Float   // Percentage for Written Work
  performanceTask    Float   // Percentage for Performance Task
  quarterlyAssessment Float   // Percentage for Quarterly Assessment
  createdBy          String? // Optional: Who created it (e.g., admin or teacher)
  @@unique([writtenWork, performanceTask, quarterlyAssessment]) 
}



